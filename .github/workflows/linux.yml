name: linux
on:
  workflow_dispatch:
jobs:
  Linux:
    strategy:
      fail-fast: false
      matrix:
        include: [
          { cc: gcc, cxx: g++ },
          { cc: clang, cxx: clang++ },
        ]
    runs-on: ubuntu-latest
    steps:
      - uses: mymindstorm/setup-emsdk@v13
      - uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true
      - name: Run setup
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          python3 -m venv _
          source _/bin/activate
          python3 -m pip install -r requirements.txt
          python3 -m pip install ninja
          env
      - uses: actions/cache@v4
        id: cache-quickjs
        with:
          path: |
            _/bin/qjs
            _/bin/qjsc
            _/lib/quickjs/libquickjs.a
            _/lib/quickjs/libquickjs.lto.a
            _/include/quickjs/quickjs.h
            _/include/quickjs/quickjs-libc.h
          key: quickjs-linux
      - if: steps.cache-quickjs.outputs.cache-hit != 'true'
        run: |
          curl https://bellard.org/quickjs/quickjs-2024-01-13.tar.xz | tar -xJf -
          make install PREFIX=${{ github.workspace }}/_ -C quickjs-2024-01-13
          rm -rf quickjs-2024-01-13
      - name: Run cmake
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
          CMAKE_PREFIX_PATH: ${{ github.workspace }}/_
        run: |
          source _/bin/activate
          set -x
          cmake -S . -B build -G "Ninja Multi-Config" \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/_ \
            -DBUILD_TESTING=1 \
            -DLIBA_WARNINGS=1 \
            -DLIBA_ANALYZER=1 \
            -DLIBA_SANITIZE=1 \
            -DLIBA_JAVASCRIPT=1 \
            -DLIBA_JAVASCRIPT_TSGEN=1 \
            -DLIBA_JAVASCRIPT_BIGINT=1 \
            -DLIBA_WITH_LUA=1 \
            -DLIBA_PYTHON=1 \
            -DLIBA_VCPKG=1 \
            -DLIBA_JAVA=1 \
            -DLIBA_QUICKJS=1 \
            -DLIBA_LIBTOOL=1 \
            -DLIBA_PKGCONFIG=1
      - name: Run ninja
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
          LIBA_OPENMP: ${{ startsWith(matrix.cc, 'gcc') }}
        run: |
          set -x
          cmake --build build --config Debug --target package
      - name: Run ctest
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        run: |
          set -x
          cmake --build build --config Debug --target test
      - name: Run ninja
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
          LIBA_OPENMP: ${{ startsWith(matrix.cc, 'gcc') }}
        run: |
          set -x
          cmake --build build --config RelWithDebInfo --target package
      - name: Run ctest
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        run: |
          set -x
          cmake --build build --config RelWithDebInfo --target test
      - name: Run vcpkg
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          set -x
          cp -r build/vcpkg/* $VCPKG_INSTALLATION_ROOT
          vcpkg install liba[ipo,pkgconfig]
      - name: Run demo
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
          CMAKE_PREFIX_PATH: ${{ github.workspace }}/_
        run: |
          set -x
          cmake --build build --config RelWithDebInfo --target install
          cmake -S demo -B demo/build
          cmake --build demo/build
