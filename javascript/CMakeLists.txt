set(LIBA_JAVASCRIPT_SUFFIX ".js" CACHE STRING "The suffix for JavaScript output files.")
set_property(CACHE LIBA_JAVASCRIPT_SUFFIX PROPERTY STRINGS ".js" ".mjs" ".html" ".wasm")
set(CMAKE_EXECUTABLE_SUFFIX ${LIBA_JAVASCRIPT_SUFFIX})

if(NOT EMSCRIPTEN)
  set(CMAKE_C_STANDARD_LIBRARIES "")
  set(CMAKE_CXX_STANDARD_LIBRARIES "")
  set(CMAKE_C_COMPILER ${EMCC_EXECUTABLE})
  set(CMAKE_CXX_COMPILER ${EMXX_EXECUTABLE})
  set(CMAKE_C_COMPILER_AR ${EMAR_EXECUTABLE})
  set(CMAKE_CXX_COMPILER_AR ${EMAR_EXECUTABLE})
  set(CMAKE_C_COMPILER_RANLIB ${EMRANLIB_EXECUTABLE})
  set(CMAKE_CXX_COMPILER_RANLIB ${EMRANLIB_EXECUTABLE})
  set(CMAKE_CROSSCOMPILING_EMULATOR ${NODE_JS_EXECUTABLE})

  list(FIND CMAKE_C_COMPILER_PREDEFINES_COMMAND -m64 emcc)

  if(${emcc} GREATER 0)
    unset(CMAKE_C_COMPILER_ARG${emcc} CACHE)
    unset(CMAKE_C_COMPILER_ARG${emcc})
  endif()

  list(FIND CMAKE_CXX_COMPILER_PREDEFINES_COMMAND -m64 emxx)

  if(${emxx} GREATER 0)
    unset(CMAKE_CXX_COMPILER_ARG${emxx} CACHE)
    unset(CMAKE_CXX_COMPILER_ARG${emxx})
  endif()
endif()

if(NOT DEFINED EMSDK_COMPILER_VERSION)
  set(EMSDK_COMPILER_VERSION ${CMAKE_C_COMPILER_VERSION})
endif()

if(EMSCRIPTEN)
  set(OBJECTS $<TARGET_OBJECTS:a>)
else()
  get_property(OBJECTS TARGET a PROPERTY SOURCES)
endif()

set(CMAKE_POSITION_INDEPENDENT_CODE ${LIBA_PIE})
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION ${LIBA_IPO})
file_scaner(SOURCES RECURSE src EXT c h cc hh cpp hpp)

# https://emscripten.org/docs/tools_reference/emcc.html
set(LIBA_EMCC_FLAGS "" CACHE STRING "Flags used by the emcc")
string_append(CMAKE_C_FLAGS ${LIBA_EMCC_FLAGS})
set(LIBA_EMXX_FLAGS "" CACHE STRING "Flags used by the em++")
string_append(CMAKE_CXX_FLAGS ${LIBA_EMXX_FLAGS})
set(LIBA_WASM_FLAGS "" CACHE STRING "Flags used by the linker")

set(CMAKE_C_LINK_EXECUTABLE "<CMAKE_C_COMPILER> <FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
set(CMAKE_CXX_LINK_EXECUTABLE "<CMAKE_CXX_COMPILER> <FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
string_append(CMAKE_C_LINK_EXECUTABLE --bind -sWASM_ASYNC_COMPILATION=0 ${LIBA_WASM_FLAGS})
string_append(CMAKE_CXX_LINK_EXECUTABLE --bind -sWASM_ASYNC_COMPILATION=0 ${LIBA_WASM_FLAGS})

add_executable(ajs ${OBJECTS} ${SOURCES})
target_compile_definitions(ajs PRIVATE $<TARGET_PROPERTY:a,COMPILE_DEFINITIONS>)
target_include_directories(ajs PRIVATE $<TARGET_PROPERTY:a,INCLUDE_DIRECTORIES>)
target_include_directories(ajs PRIVATE ${EMSCRIPTEN_SYSROOT}/include)
set_target_properties(ajs PROPERTIES OUTPUT_NAME ${PROJECT_NAME}
  RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_CURRENT_LIST_DIR}
  RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_CURRENT_LIST_DIR}
  RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_LIST_DIR}
  RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_LIST_DIR}
)

if(NOT CMAKE_VERSION VERSION_LESS 3.3 AND LIBA_WARNINGS AND UNIX)
  target_compile_options(ajs PRIVATE -Weverything -Wno-documentation
    -Wno-documentation-unknown-command -Wno-used-but-marked-unused
    $<$<COMPILE_LANGUAGE:C>:-Wno-declaration-after-statement>
    $<$<COMPILE_LANGUAGE:CXX>:-Wno-c++98-compat-pedantic>
  )

  if(NOT EMSDK_COMPILER_VERSION VERSION_LESS 16)
    target_compile_options(ajs PRIVATE -Wno-unsafe-buffer-usage)
  endif()
endif()

if(EXISTS ${CMAKE_CURRENT_LIST_DIR}/test/CMakeLists.txt AND CMAKE_CROSSCOMPILING_EMULATOR)
  add_subdirectory(test)
endif()
